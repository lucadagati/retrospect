' SPDX-License-Identifier: CC-BY-4.0
' Copyright Â© 2025 Wasmbed contributors

@startuml
title Device Enrollment - Complete Workflow (Renode Implementation)

skinparam wrapMessageWidth 200
skinparam sequenceMessageAlign center
skinparam sequenceArrowThickness 2
skinparam sequenceLifeLineBackgroundColor #E8F4FD
skinparam sequenceActorBackgroundColor #D4E6F1
skinparam sequenceParticipantBackgroundColor #F8F9FA

actor "Arduino Nano 33 BLE" as MCU #LightBlue
participant "TLS Client" as TLS_CLIENT #LightGreen
participant "Gateway Server" as GATEWAY #LightCoral
participant "Renode Manager" as RENODE_MGR #LightYellow
participant "Certificate Manager" as CERT_MGR #LightPink
participant "Kubernetes API" as K8S_API #LightGray
participant "Device Controller" as CONTROLLER #LightCyan
database "etcd" as ETCD #LightSteelBlue

== Initialization Phase ==

MCU -> MCU : **Initialize Renode Device**
note right : Start Renode emulation\nLoad Arduino Nano 33 BLE platform\nInitialize ARM Cortex-M4 firmware

MCU -> TLS_CLIENT : **Create TLS Client**
note right : Install rustls crypto provider\nLoad device certificates (DER format)\nInitialize TLS context with X.509 v3

TLS_CLIENT -> TLS_CLIENT : **Load Device Certificates**
note right : Load ca-cert.der\nLoad device-cert.der\nLoad device-key.der\nVerify certificate chain

== Connection Establishment ==

TLS_CLIENT -> GATEWAY : **TCP Connection Request**
note right : Connect to gateway:8081\nEstablish TCP socket\nPrepare TLS 1.3 handshake

GATEWAY -> GATEWAY : **Accept Connection**
note right : Accept incoming connection\nCreate rustls server context\nLoad X.509 v3 server certificates

TLS_CLIENT -> GATEWAY : **TLS 1.3 Handshake**
note right : Client Hello with cipher suites\nServer Hello with X.509 v3 certificate\nMutual TLS authentication\nKey exchange and verification

GATEWAY -> TLS_CLIENT : **TLS Handshake Complete**
note right : Mutual TLS established\nEncrypted channel ready\nSession keys exchanged\nCertificate validation passed

== Enrollment Request ==

TLS_CLIENT -> GATEWAY : **Enrollment Request**
note right : CBOR encoded message\nDevice type: "RenodeArduinoNano33Ble"\nArchitecture: "ARM_CORTEX_M"\nCapabilities: ["wasm", "tls", "cbor"]\nPublic key: DER encoded

GATEWAY -> RENODE_MGR : **Process Enrollment**
note right : Validate Renode device type\nCheck ARM Cortex-M4 capabilities\nVerify public key format\nGenerate unique device ID

RENODE_MGR -> CERT_MGR : **Validate Device Certificate**
note right : Verify X.509 v3 device certificate\nCheck certificate chain against CA\nValidate signature with rustls\nCheck certificate expiration

CERT_MGR -> RENODE_MGR : **Certificate Valid**
note right : X.509 v3 certificate verification passed\nDevice authenticated via mTLS\nReady for Kubernetes registration

RENODE_MGR -> K8S_API : **Create Device CRD**
note right : POST /apis/wasmbed.io/v1/namespaces/wasmbed/devices\nDevice metadata with Renode info\nARM Cortex-M4 specifications\nStatus: Pending

K8S_API -> ETCD : **Store Device Resource**
note right : Persist device resource\nGenerate resource version\nCreate watch events for controllers

ETCD -> K8S_API : **Device Created**
note right : Resource stored successfully\nVersion: 1\nUID generated\nNamespace: wasmbed

K8S_API -> RENODE_MGR : **Device CRD Created**
note right : HTTP 201 Created\nResource metadata\nLocation header\nResource version

== Controller Notification ==

K8S_API -> CONTROLLER : **Watch Event: Device Added**
note right : Event type: ADDED\nObject: Device resource\nNamespace: wasmbed\nResource version\nRenode device detected

CONTROLLER -> CONTROLLER : **Reconcile Device**
note right : Parse device resource\nValidate Renode device spec\nCheck ARM Cortex-M4 status\nUpdate device phase to Connected

CONTROLLER -> K8S_API : **Update Device Status**
note right : PATCH device resource\nStatus.phase: "Connected"\nStatus.gateway: gateway-pod-name\nStatus.renode_status: "Running"\nStatus.connected_since: timestamp

K8S_API -> ETCD : **Update Device Status**
note right : Update resource in etcd\nIncrement resource version\nGenerate watch events\nPersist Renode status

== Enrollment Response ==

RENODE_MGR -> GATEWAY : **Enrollment Success**
note right : Renode device registered successfully\nDevice ID generated\nGateway assigned\nARM Cortex-M4 status updated

GATEWAY -> TLS_CLIENT : **Enrollment Response**
note right : CBOR encoded response\nStatus: Success\nDevice ID: uuid\nGateway info: 127.0.0.1:8081\nHeartbeat interval: 30s\nWASM runtime ready

TLS_CLIENT -> MCU : **Enrollment Complete**
note right : Renode device successfully enrolled\nARM Cortex-M4 ready for WASM deployment\nStart heartbeat timer\nInitialize WASM runtime

== Heartbeat Setup ==

MCU -> MCU : **Start Heartbeat Timer**
note right : Set interval: 30 seconds\nPrepare CBOR heartbeat message\nInitialize ARM Cortex-M4 metrics\nMonitor Renode status

MCU -> TLS_CLIENT : **Send Heartbeat**
note right : CBOR encoded heartbeat\nDevice ID\nTimestamp\nRenode status: Active\nARM Cortex-M4 metrics\nWASM runtime status

TLS_CLIENT -> GATEWAY : **Heartbeat Message**
note right : Encrypted heartbeat via TLS 1.3\nDevice status\nRenode performance metrics\nARM Cortex-M4 error counts\nWASM runtime health

GATEWAY -> RENODE_MGR : **Process Heartbeat**
note right : Validate device ID\nUpdate last heartbeat time\nCheck Renode device health\nProcess ARM Cortex-M4 metrics\nMonitor WASM runtime

RENODE_MGR -> K8S_API : **Update Device Heartbeat**
note right : PATCH device resource\nStatus.last_heartbeat: timestamp\nStatus.health: "healthy"\nStatus.renode_metrics: data\nStatus.wasm_runtime: "ready"

== Error Handling ==

alt **Enrollment Failure**
    RENODE_MGR -> GATEWAY : **Enrollment Failed**
    note right : Invalid Renode device type\nUnsupported ARM Cortex-M4 capabilities\nX.509 v3 certificate validation failed\nDuplicate device ID
    
    GATEWAY -> TLS_CLIENT : **Error Response**
    note right : CBOR encoded error\nError code: ENROLLMENT_FAILED\nError message\nRetry information\nCertificate issues
    
    TLS_CLIENT -> MCU : **Enrollment Error**
    note right : Log error message\nWait before retry\nUpdate Renode device status\nCheck certificate validity
end

alt **Connection Lost**
    GATEWAY -> RENODE_MGR : **Connection Lost**
    note right : TCP connection closed\nTLS 1.3 session terminated\nRenode device unreachable\nARM Cortex-M4 offline
    
    RENODE_MGR -> K8S_API : **Update Device Status**
    note right : PATCH device resource\nStatus.phase: "Disconnected"\nStatus.last_heartbeat: null\nStatus.renode_status: "Stopped"\nStatus.error: "Connection lost"
    
    K8S_API -> CONTROLLER : **Watch Event: Device Updated**
    note right : Event type: MODIFIED\nObject: Device resource\nStatus change detected\nRenode device offline
end

alt **Certificate Issues**
    CERT_MGR -> RENODE_MGR : **Certificate Validation Failed**
    note right : X.509 v3 certificate invalid\nCertificate chain broken\nSignature verification failed\nCertificate expired
    
    RENODE_MGR -> GATEWAY : **Certificate Error**
    note right : Device certificate invalid\nCannot authenticate device\nReject enrollment request\nRequest certificate renewal
    
    GATEWAY -> TLS_CLIENT : **Certificate Error Response**
    note right : CBOR encoded error\nError code: CERTIFICATE_INVALID\nError message: Certificate validation failed\nAction: Renew device certificate
end

@enduml