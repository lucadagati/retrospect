' SPDX-License-Identifier: CC-BY-4.0
' Copyright Â© 2025 Wasmbed contributors

@startuml
title Application Deployment - Simplified Workflow

skinparam wrapMessageWidth 200
skinparam sequenceMessageAlign center
skinparam sequenceArrowThickness 2
skinparam sequenceLifeLineBackgroundColor #E8F4FD
skinparam sequenceActorBackgroundColor #D4E6F1
skinparam sequenceParticipantBackgroundColor #F8F9FA
skinparam direction top to bottom

actor "User" as USER #LightBlue
participant "React Dashboard" as DASHBOARD #LightGreen
participant "API Server" as API_SERVER #LightCoral
participant "Gateway Server" as GATEWAY #LightPink
participant "Arduino Device" as DEVICE #LightSteelBlue
participant "Kubernetes API" as K8S_API #LightSalmon

== Application Creation ==

USER -> DASHBOARD : **Create Application**
note right : Enter Rust source code\nSelect target devices\nConfigure deployment

DASHBOARD -> API_SERVER : **POST /api/v1/compile**
note right : Send Rust source code\nRequest WASM compilation\nSpecify ARM Cortex-M4 target

API_SERVER -> API_SERVER : **Compile Rust to WASM**
note right : Use rustc with wasm32-unknown-unknown\nCompile with no_std\nGenerate WASM binary

API_SERVER -> DASHBOARD : **Compilation Success**
note right : WASM binary ready\nBinary metadata\nReady for deployment

== Application Deployment ==

DASHBOARD -> API_SERVER : **POST /api/v1/applications**
note right : Application metadata\nWASM binary (base64)\nTarget devices: [arduino-nano-33-ble]

API_SERVER -> K8S_API : **Create Application CRD**
note right : POST application resource\nApplication spec with WASM binary\nStatus: Pending

K8S_API -> API_SERVER : **Application Created**
note right : HTTP 201 Created\nResource metadata\nApplication ID generated

== Gateway Deployment ==

API_SERVER -> GATEWAY : **Deploy Application**
note right : Application metadata\nWASM binary (base64)\nTarget device IDs\nTLS encrypted request

GATEWAY -> GATEWAY : **Prepare WASM Runtime**
note right : Initialize wasmtime engine\nPrepare WASM module\nValidate binary format

GATEWAY -> DEVICE : **TLS Connection**
note right : Connect to Arduino Nano 33 BLE\nEstablish TLS 1.3 connection\nMutual authentication

DEVICE -> DEVICE : **Prepare for Deployment**
note right : Initialize WASM runtime\nPrepare memory allocation\nReady for binary transfer

GATEWAY -> DEVICE : **Send WASM Binary**
note right : CBOR encoded message\nWASM binary transfer\nApplication metadata\nTLS encrypted transmission

DEVICE -> DEVICE : **Load WASM Application**
note right : Receive WASM binary\nParse CBOR message\nLoad into wasmtime runtime\nInitialize application context

DEVICE -> DEVICE : **Execute WASM Application**
note right : Start WASM execution\nInitialize application state\nBegin main function\nMonitor execution status

DEVICE -> GATEWAY : **Deployment Confirmation**
note right : CBOR encoded response\nStatus: Success\nApplication ID\nExecution status\nPerformance metrics

== Status Updates ==

GATEWAY -> K8S_API : **Update Application Status**
note right : PATCH application resource\nStatus.phase: Deployed\nStatus.deployed_devices: [arduino-nano-33-ble]\nStatus.metrics: performance_data

== Real-time Monitoring ==

DEVICE -> DEVICE : **Application Execution**
note right : WASM application running\nMonitor performance\nCollect metrics\nHandle events

DEVICE -> GATEWAY : **Periodic Status Updates**
note right : CBOR encoded heartbeat\nApplication status\nPerformance metrics\nError counts\nResource usage

GATEWAY -> K8S_API : **Update Application Metrics**
note right : PATCH application resource\nStatus.metrics: updated_data\nStatus.last_update: timestamp\nStatus.health: healthy

== Application Management ==

USER -> DASHBOARD : **Monitor Application**
note right : View real-time status\nCheck performance metrics\nMonitor device health\nView execution logs

DASHBOARD -> API_SERVER : **GET /api/v1/applications/{id}**
note right : Request application details\nCurrent status\nPerformance metrics\nDevice information

API_SERVER -> K8S_API : **Get Application Resource**
note right : GET application resource\nCurrent status\nDeployment information\nPerformance data

K8S_API -> API_SERVER : **Application Resource**
note right : Application details\nCurrent status\nMetrics data\nDevice information

API_SERVER -> DASHBOARD : **Application Status**
note right : Real-time status\nPerformance metrics\nDevice health\nExecution information

DASHBOARD -> USER : **Display Application Status**
note right : Real-time dashboard\nPerformance graphs\nDevice status\nExecution logs\nHealth indicators

== Error Handling ==

alt **Compilation Failure**
    API_SERVER -> DASHBOARD : **Compilation Error**
    note right : Rust compilation failed\nSyntax errors detected\nDependency issues
    
    DASHBOARD -> USER : **Compilation Failed**
    note right : Error response\nError details\nSuggestions for fixes
end

alt **Deployment Failure**
    DEVICE -> GATEWAY : **Deployment Error**
    note right : WASM binary invalid\nMemory allocation failed\nRuntime initialization error
    
    GATEWAY -> K8S_API : **Update Application Status**
    note right : PATCH application resource\nStatus.phase: Failed\nStatus.error: error_details
end

alt **Runtime Error**
    DEVICE -> GATEWAY : **Runtime Error**
    note right : WASM execution failed\nMemory access violation\nFunction call error
    
    GATEWAY -> K8S_API : **Update Application Status**
    note right : PATCH application resource\nStatus.phase: Error\nStatus.health: unhealthy
end

@enduml
